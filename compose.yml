services:
  react-app:
    container_name: react-app--${ENVIRONMENT}
    image: react-app:development
    build: 
      context: ./react-app
      dockerfile: Dockerfile 
      target: ${ENVIRONMENT}
    ports:
      - "5173:5173"
      - "80:80"
    develop:
      watch:
        - action: sync
          path: ./react-app/src 
          target: /app/src
        - action: sync+restart
          path: ./react-app
          target: /app
          ignore:
            - ./src
        - action: rebuild
          path: ./react-app/package.json

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-database:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - ./logs/sonarqube:/opt/sonarqube/logs
    networks:
      - sonar-network
    depends_on:
      sonarqube-database:
        condition: service_healthy

  sonarqube-database:
    image: postgres:alpine
    container_name: sonarqube-database
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - sonarqube-data:/var/lib/postgresql/data
    networks:
      - sonar-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 20s
      timeout: 15s
      retries: 5
      start_period: 15s

networks:
  sonar-network:
    driver: bridge

volumes:
  sonarqube-data:
